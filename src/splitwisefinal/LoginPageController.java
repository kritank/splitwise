/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package splitwisefinal;

import java.io.*; 
import java.net.*; 
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import javafx.stage.StageStyle;


/**
 * FXML Controller class
 *
 * @author KRITANK SINGH
 */
public class LoginPageController implements Initializable{   
    @FXML
    private Label registerButton;
    @FXML
    private PasswordField passwordField;
    @FXML
    private TextField userNameField;
    @FXML
    private Button LoginButton;
    @FXML
    private Button resetButton;
    @FXML
    private ImageView closeButton;
    @FXML
    private ImageView minimiseButton;
     @FXML
    private Label statusField;
    

    /**
     * Initializes the controller class.
     */
    
    //define your offsets here
    private double xOffset = 0;
    private double yOffset = 0;
    final static int ServerPort = 1234; 
    DataInputStream dis ;
    DataOutputStream dos;
    FXMLLoader loader;
    user client=null;
    Page p;
   
    @Override
    public void initialize(URL url, ResourceBundle rb) {
    }  

    @FXML
    private void registerButtonClicked(MouseEvent event) {
        open("registerPage.fxml");
        close();
    }

    @FXML
    private void LoginButtonClicked(MouseEvent event) {
        //checking all required fields
            statusField.setText("");
            int u=0,p=0;
            if(userNameField.getText().equals(""))
            {
                statusField.setText("Enter UserName!");
            }
            else u=1; 
            if(passwordField.getText().equals(""))
            {
                statusField.setText("Enter Password!");
            }
            else p=1;
      
            if(p==1&&u==1){
                 
                // getting localhost ip 
                try{
                InetAddress ip = InetAddress.getByName("localhost"); 
		
		// establish the connection 
		Socket s = new Socket(ip, ServerPort); 
                
                // obtaining input and out streams 
		dis = new DataInputStream(s.getInputStream()); 
		dos = new DataOutputStream(s.getOutputStream()); 
                
                // sendMessage thread 
		Thread sendMessage = new Thread(new Runnable() 
		{ 
			@Override
			public void run() { 
                            
					// read the message to deliver. 
                                        String queryType = "21";
					String userName = userNameField.getText();
                                        String password = passwordField.getText();
					String encryptedPassword;
                                        
                                         try 
                                        { 
                                            //encrypting the password
                                            encryptedPassword=shaEncrypter.toHexString(shaEncrypter.getSHA(password));
                                            System.out.print("HashCode Generated by SHA-256 for: ");  
                                            System.out.println(password + " : " +encryptedPassword);
                                            
                                             // trying to send to server
                                             // write on the output stream 
                                            dos.writeUTF(queryType);
                                       	    dos.writeUTF(userName);
                                            dos.writeUTF(encryptedPassword);
                                        } 
                                         catch (Exception e) {  
                                            System.out.println("Problem in seding: userName password"+e); 
                                        }  
			} 
		});
                sendMessage.start(); 
                System.out.println("Sent to Server!!");
                
                ArrayList<panelData> billData=new ArrayList<panelData>();
                ArrayList<panelData> otherBillData=new ArrayList<panelData>();
                // readMessage thread 
		Thread readMessage = new Thread(new Runnable() 
		{ 
			@Override
			public void run() { 

                                            
					try { 
						// read the message sent to this client 
                                                String queryType = dis.readUTF();
                                                String serverName= dis.readUTF();
                                                int result = Integer.parseInt(dis.readUTF());
                                                int result2 = Integer.parseInt(dis.readUTF());
                                                int result3 = Integer.parseInt(dis.readUTF());
                                                System.out.println(serverName+": "+queryType+" "+result+" "+result2+" "+result3);
                                                String uid="",userName="",phoneNo="",email="",password="";
                                                String billId="",amount="",description="",mode="";
                                                if(result==1)
                                                {
                                                    
                                                    uid=dis.readUTF();
                                                    userName=dis.readUTF();
                                                    phoneNo=dis.readUTF();
                                                    email=dis.readUTF();
                                                    password=dis.readUTF();
                                                    System.out.println("uid: "+uid+" "+userName+" "+phoneNo+" "+email+" "+password);
                                                }
                                                client=new user(uid,userName,phoneNo,email,password,false);
                                                 if(result2==1)
                                                {
                                                    ObservableList<String> participantsId=FXCollections.observableArrayList();
                                                    ObservableList<String> payerList=FXCollections.observableArrayList();
                                                    int count=Integer.parseInt(dis.readUTF());
                                                    System.out.println("billDataSize: "+count);
                                                    while(count>0)
                                                    {
                                                        participantsId.clear();
                                                        payerList.clear();
                                                        billId=dis.readUTF();
                                                        amount=dis.readUTF();
                                                        description=dis.readUTF();
                                                        mode=dis.readUTF();
                                                        int participantsCount=Integer.parseInt(dis.readUTF());
                                                        for(int j=0;j<participantsCount;j++)
                                                        {
                                                            String participantUid=dis.readUTF();
                                                            participantsId.add(participantUid);
                                                        }
                                                        int payerCount=Integer.parseInt(dis.readUTF());
                                                        for(int j=0;j<payerCount;j++)
                                                        {
                                                            String payerUid=dis.readUTF();
                                                            payerList.add(payerUid);
                                                        }
                                                        panelData temp=new panelData(billId,amount,description,mode,payerList,participantsId,"bill");
                                                        billData.add(temp);
                                                        count--;
                                                    }
                                                    
                                                }
                                                if(result3==1)
                                                {
                                                    ObservableList<String> participantsId=FXCollections.observableArrayList();
                                                    ObservableList<String> payerList=FXCollections.observableArrayList();
                                                    int count=Integer.parseInt(dis.readUTF());
                                                    System.out.println("otherBillDataSize: "+count);
                                                    while(count>0)
                                                    {
                                                        participantsId.clear();
                                                        payerList.clear();
                                                        billId=dis.readUTF();
                                                        amount=dis.readUTF();
                                                        description=dis.readUTF();
                                                        mode=dis.readUTF();
                                                        //uid=dis.readUTF();
                                                        int participantsCount=Integer.parseInt(dis.readUTF());
                                                        System.out.println("participant count: "+participantsCount);
                                                        for(int j=0;j<participantsCount;j++)
                                                        {
                                                            String participantUid=dis.readUTF();
                                                            participantsId.add(participantUid);
                                                        }
                                                        int payerCount=Integer.parseInt(dis.readUTF());
                                                        System.out.println("payer count: "+payerCount);
                                                        for(int j=0;j<payerCount;j++)
                                                        {
                                                            String payerUid=dis.readUTF();
                                                            payerList.add(payerUid);
                                                        }
                                                        System.out.println("1");
                                                        panelData temp=new panelData(billId,amount,description,mode,payerList,participantsId,"otherBill");
                                                        otherBillData.add(temp);
                                                        System.out.println("2");
                                                        count--;
                                                    }
                                                    System.out.println("3");
                                                }
                                                System.out.println("ddddd");
                                                switch(result){
                                                      case 1:
                                                          System.out.println("a");
                                                                if(result2==1){
                                                                System.out.println("aa");
                                                                retrivedBill temp=new retrivedBill(billData, otherBillData);
                                                                System.out.println("hoofds");
                                                                Platform.runLater(new Runnable() {
                                                                    public void run() {
                                                                        open("homePage.fxml");
                                                                        HomePageController contoller=loader.getController();
                                                                         contoller.setStream(dis,dos,client,temp);
                                                                        close(); 
                                                                    }
                                                                    
                                                                });
                                                                }
                                                                else if(result2==0)
                                                                {
                                                                    System.out.println("ab");
                                                                statusFieldAlert salert=new statusFieldAlert(statusField,"Sorry! Please try again Later!!");
                                                                System.out.println("client logged in but error in retriving bills");
                                                                salert.alert(); 
                                                                }
                                                                break;
                                                      case 0:
                                                          System.out.println("b");
                                                                statusFieldAlert salert=new statusFieldAlert(statusField,"Invalid Credentials!!");
                                                                salert.alert();
                                                                break;
                                                      default:  
                                                          System.out.println("Invalid Result obtained!!");
                                                }
						
					} catch (Exception e) { 

						System.out.println("Problem: in reciving"+e); 
					} 
                                        
				}
		}); 
                readMessage.start(); 
                System.out.println("Got the message from server");
                
                
            }
        catch(Exception e)
        {
            System.out.println("client Server connection problem");
            statusField.setText("Server is not online!");
        }
    }
}

    @FXML
    private void resetButtonClicked(MouseEvent event) {
        userNameField.setText("");
        passwordField.setText("");
        userNameField.setPromptText("Eg: Ramesh");
        passwordField.setPromptText("************");
        statusField.setText("");
        
    }

    @FXML
    private void closeButtonClicked(MouseEvent event) {
          System.exit(0);
    }

    @FXML
    private void minimiseButtonClicked(MouseEvent event) {
        try{
             Stage stage = (Stage)((Button)event.getSource()).getScene().getWindow();
            // is stage minimizable into task bar. (true | false)
            stage.setIconified(true);
        }
        catch(Exception e)
        {
       System.out.println("minimised");
        }
    }
    
    void open(String s) 
    {
        try{
         loader=new FXMLLoader();
         loader.setLocation(getClass().getResource(s));
         loader.load();
         Parent root = loader.getRoot();
         Stage stage = new Stage();
        //you can use underdecorated or transparent.
        stage.initStyle(StageStyle.TRANSPARENT);
        //stage.initStyle(StageStyle.UNDERDECORATED);
       
       //grab your root here
             root.setOnMousePressed(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                xOffset = event.getSceneX();
                yOffset = event.getSceneY();
            }
        });
        
        //move around here
        root.setOnMouseDragged(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                stage.setX(event.getScreenX() - xOffset);
                stage.setY(event.getScreenY() - yOffset);
            }
        });

        
        Scene scene = new Scene(root);
        stage.setScene(scene);
        stage.show();
        }
        catch(IOException e)
        {
            System.out.println("Can't open "+s);
        }
    }
    
    void close()
    {
        Stage stage = (Stage) closeButton.getScene().getWindow();
        stage.close();
    }
    
}
